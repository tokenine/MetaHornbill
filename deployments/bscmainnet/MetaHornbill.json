{
  "address": "0x0eA6A3aC9F0ED107Ee21c603d76cb9Eaa9b75e5f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_NFT_NAME",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_NFT_SYMBOL",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_AVAILABLE_SUPPLY",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_MINT_PRE_START_TIME",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_MINT_START_TIME",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_MINT_END_TIME",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_afin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mvp",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Locked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entries",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entries",
          "type": "uint256"
        }
      ],
      "name": "MintedPre",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseUri",
          "type": "string"
        }
      ],
      "name": "SetBaseURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeAdd",
          "type": "address"
        }
      ],
      "name": "SetFeeAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "provenance",
          "type": "string"
        }
      ],
      "name": "SetProvenance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startPre",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "SetTimes",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ToggleOpen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entries",
          "type": "uint256"
        }
      ],
      "name": "Whitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entries",
          "type": "uint256"
        }
      ],
      "name": "WhitelistedPre",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AVAILABLE_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_COST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_END_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_PRE_START_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_START_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "afin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "afinPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimProceeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "claimProceedsToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "entriesPerAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "entriesPerAddressPre",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entropy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "locked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "mintCustom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "mintPre",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "mintPreWithToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "mintWithToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mvp",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mvpPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "provenance",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        }
      ],
      "name": "setFeeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_MINT_PRE_START_TIME",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_MINT_START_TIME",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_MINT_END_TIME",
          "type": "uint256"
        }
      ],
      "name": "setMintTimes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_provenance",
          "type": "string"
        }
      ],
      "name": "setProvenance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "entries",
          "type": "uint256[]"
        }
      ],
      "name": "setWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "entries",
          "type": "uint256[]"
        }
      ],
      "name": "setWhitelistPre",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startingIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleOpen",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistPre",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xee70387c49b8d559a8fa7d644fad7e595d0d7d2ff811597fc872c0030a2320df",
  "receipt": {
    "to": null,
    "from": "0xd0BE34550AC47e616B7220564605BA00912A5FeF",
    "contractAddress": "0x0eA6A3aC9F0ED107Ee21c603d76cb9Eaa9b75e5f",
    "transactionIndex": 118,
    "gasUsed": "3886007",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001040000000000000000000000000000000000020000000000000200000800000000000000000000000000000000400000000000000000000000000010000000000000000000000000000000000000000000000000000400000000000000000000000001000002200000000000000000000000000000000400000000000000000000000000000000000000000020000000000000000000000000000000000000000020000000000000000000000000",
    "blockHash": "0xd29abb2e52ee4dd8a125c2ba7c2d59e5869511dd64d1040e637a04b684754859",
    "transactionHash": "0xee70387c49b8d559a8fa7d644fad7e595d0d7d2ff811597fc872c0030a2320df",
    "logs": [
      {
        "transactionIndex": 118,
        "blockNumber": 16106233,
        "transactionHash": "0xee70387c49b8d559a8fa7d644fad7e595d0d7d2ff811597fc872c0030a2320df",
        "address": "0x0eA6A3aC9F0ED107Ee21c603d76cb9Eaa9b75e5f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d0be34550ac47e616b7220564605ba00912a5fef"
        ],
        "data": "0x",
        "logIndex": 359,
        "blockHash": "0xd29abb2e52ee4dd8a125c2ba7c2d59e5869511dd64d1040e637a04b684754859"
      },
      {
        "transactionIndex": 118,
        "blockNumber": 16106233,
        "transactionHash": "0xee70387c49b8d559a8fa7d644fad7e595d0d7d2ff811597fc872c0030a2320df",
        "address": "0x0eA6A3aC9F0ED107Ee21c603d76cb9Eaa9b75e5f",
        "topics": [
          "0x3e5026851758e1ab6e995b071b048e26e92f459b047600ff68914479d5074c54"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000624848d000000000000000000000000000000000000000000000000000000000624aebd000000000000000000000000000000000000000000000000000000000624d8ed0",
        "logIndex": 360,
        "blockHash": "0xd29abb2e52ee4dd8a125c2ba7c2d59e5869511dd64d1040e637a04b684754859"
      }
    ],
    "blockNumber": 16106233,
    "cumulativeGasUsed": "16017537",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "MetaHornbill",
    "METAHORNBILL",
    2000,
    1648904400,
    1649077200,
    1649250000,
    "0xb955b4cab9aa3b49e23aeb5204ebc5ff6678e86d",
    "0x3379a0bdf5a5cb566127c421782686ba0f80490a",
    "0xd0BE34550AC47e616B7220564605BA00912A5FeF"
  ],
  "solcInputHash": "4f031792cdad090f82921d206733d764",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_NFT_NAME\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_NFT_SYMBOL\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_AVAILABLE_SUPPLY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MINT_PRE_START_TIME\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MINT_START_TIME\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MINT_END_TIME\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_afin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mvp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entries\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entries\",\"type\":\"uint256\"}],\"name\":\"MintedPre\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"}],\"name\":\"SetBaseURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeAdd\",\"type\":\"address\"}],\"name\":\"SetFeeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"provenance\",\"type\":\"string\"}],\"name\":\"SetProvenance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startPre\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"SetTimes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ToggleOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entries\",\"type\":\"uint256\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entries\",\"type\":\"uint256\"}],\"name\":\"WhitelistedPre\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AVAILABLE_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_END_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PRE_START_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_START_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"afin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"afinPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimProceedsToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"entriesPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"entriesPerAddressPre\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entropy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"mintCustom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"mintPre\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"mintPreWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"mintWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mvp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mvpPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"provenance\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MINT_PRE_START_TIME\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MINT_START_TIME\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MINT_END_TIME\",\"type\":\"uint256\"}],\"name\":\"setMintTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_provenance\",\"type\":\"string\"}],\"name\":\"setProvenance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"entries\",\"type\":\"uint256[]\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"entries\",\"type\":\"uint256[]\"}],\"name\":\"setWhitelistPre\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistPre\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MetaHornbill.sol\":\"MetaHornbill\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MetaHornbill.sol\":{\"content\":\"pragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract MetaHornbill is Ownable, ERC721, ERC721Enumerable, ReentrancyGuard {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    uint256 public constant MINT_COST = 0.5 ether;\\r\\n    uint256 public immutable AVAILABLE_SUPPLY;\\r\\n    uint256 public MINT_PRE_START_TIME;\\r\\n    uint256 public MINT_START_TIME;\\r\\n    uint256 public MINT_END_TIME;\\r\\n\\r\\n    mapping(address => uint256) public whitelistPre;\\r\\n    mapping(address => uint256) public whitelist;\\r\\n    mapping(address => uint256) public entriesPerAddressPre;\\r\\n    mapping(address => uint256) public entriesPerAddress;\\r\\n    string public uri;\\r\\n    string public provenance;\\r\\n    bool public locked;\\r\\n    bool public mintOpen;\\r\\n    uint256 public entropy;\\r\\n    uint256 public nftCount;\\r\\n    uint256 public afinPrice = 3000000000000000000000;\\r\\n    uint256 public mvpPrice = 6000000000000000000000;\\r\\n    address public afin;\\r\\n    address public mvp;\\r\\n    address public feeAddress;\\r\\n\\r\\n    event WhitelistedPre(address indexed user, uint256 entries);\\r\\n    event Whitelisted(address indexed user, uint256 entries);\\r\\n    event MintedPre(address indexed user, uint256 entries);\\r\\n    event Minted(address indexed user, uint256 entries);\\r\\n    event Claimed(address indexed owner, uint256 amount);\\r\\n    event SetBaseURI(string baseUri);\\r\\n    event SetProvenance(string provenance);\\r\\n    event SetTimes(uint256 startPre, uint256 start, uint256 end);\\r\\n    event Locked();\\r\\n    event ToggleOpen();\\r\\n    event SetFeeAddress(address feeAdd);\\r\\n\\r\\n    constructor(\\r\\n        string memory _NFT_NAME,\\r\\n        string memory _NFT_SYMBOL,\\r\\n        uint256 _AVAILABLE_SUPPLY,\\r\\n        uint256 _MINT_PRE_START_TIME,\\r\\n        uint256 _MINT_START_TIME,\\r\\n        uint256 _MINT_END_TIME,\\r\\n        address _afin,\\r\\n        address _mvp,\\r\\n        address _feeAddress\\r\\n    ) ERC721(_NFT_NAME, _NFT_SYMBOL) Ownable() {\\r\\n        AVAILABLE_SUPPLY = _AVAILABLE_SUPPLY;\\r\\n        MINT_PRE_START_TIME = _MINT_PRE_START_TIME;\\r\\n        MINT_START_TIME = _MINT_START_TIME;\\r\\n        MINT_END_TIME = _MINT_END_TIME;\\r\\n        afin = _afin;\\r\\n        mvp = _mvp;\\r\\n        feeAddress = _feeAddress;\\r\\n\\r\\n        emit SetTimes(_MINT_PRE_START_TIME, _MINT_START_TIME, _MINT_END_TIME);\\r\\n    }\\r\\n\\r\\n    function setFeeAddress(address _feeAddress) public onlyOwner {\\r\\n        feeAddress = _feeAddress;\\r\\n        emit SetFeeAddress(_feeAddress);\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string calldata _uri) public onlyOwner {\\r\\n        require(!locked, \\\"Metadata locked\\\");\\r\\n        uri = _uri;\\r\\n        emit SetBaseURI(_uri);\\r\\n    }\\r\\n\\r\\n    function setProvenance(string calldata _provenance) public onlyOwner {\\r\\n        require(!locked, \\\"Metadata locked\\\");\\r\\n        provenance = _provenance;\\r\\n        emit SetProvenance(_provenance);\\r\\n    }\\r\\n\\r\\n    function setMintTimes(\\r\\n        uint256 _MINT_PRE_START_TIME,\\r\\n        uint256 _MINT_START_TIME,\\r\\n        uint256 _MINT_END_TIME\\r\\n    ) public onlyOwner {\\r\\n        MINT_PRE_START_TIME = _MINT_PRE_START_TIME;\\r\\n        MINT_START_TIME = _MINT_START_TIME;\\r\\n        MINT_END_TIME = _MINT_END_TIME;\\r\\n        emit SetTimes(_MINT_PRE_START_TIME, _MINT_START_TIME, _MINT_END_TIME);\\r\\n    }\\r\\n\\r\\n    function setPrice(\\r\\n        uint256 price,\\r\\n        address token\\r\\n    ) public onlyOwner {\\r\\n        require(token == afin || token == mvp, \\\"unsupported token\\\");\\r\\n        if (token == afin){\\r\\n            afinPrice = price;\\r\\n        }\\r\\n        else if (token == mvp){\\r\\n            mvpPrice = price;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function lockMetadata() public onlyOwner {\\r\\n        locked = true;\\r\\n        emit Locked();\\r\\n    }\\r\\n\\r\\n    function setWhitelistPre(\\r\\n        address[] calldata addresses,\\r\\n        uint256[] calldata entries\\r\\n    ) public onlyOwner {\\r\\n        require(\\r\\n            addresses.length == entries.length,\\r\\n            \\\"Addresses length != entries length\\\"\\r\\n        );\\r\\n        for (uint256 i = 0; i < addresses.length; i++) {\\r\\n            require(addresses[i] != address(0), \\\"zero\\\");\\r\\n            whitelistPre[addresses[i]] = entries[i];\\r\\n            emit WhitelistedPre(addresses[i], entries[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setWhitelist(\\r\\n        address[] calldata addresses,\\r\\n        uint256[] calldata entries\\r\\n    ) public onlyOwner {\\r\\n        require(\\r\\n            addresses.length == entries.length,\\r\\n            \\\"Addresses length != entries length\\\"\\r\\n        );\\r\\n        for (uint256 i = 0; i < addresses.length; i++) {\\r\\n            require(addresses[i] != address(0), \\\"Zero\\\");\\r\\n            whitelist[addresses[i]] = entries[i];\\r\\n            emit Whitelisted(addresses[i], entries[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function toggleOpen() public onlyOwner {\\r\\n        mintOpen = !mintOpen;\\r\\n        emit ToggleOpen();\\r\\n    }\\r\\n\\r\\n    function _checkedMint(address to) internal {\\r\\n        require(nftCount < AVAILABLE_SUPPLY, \\\"Available supply reached\\\");\\r\\n        _safeMint(msg.sender, nftCount + 1);\\r\\n        nftCount++;\\r\\n    }\\r\\n\\r\\n    function _checkedMintCustom(address to) internal {\\r\\n        require(nftCount < AVAILABLE_SUPPLY + 60, \\\"Available supply reached\\\");\\r\\n        _safeMint(msg.sender, nftCount + 1);\\r\\n        nftCount++;\\r\\n    }\\r\\n\\r\\n    function mintPre(uint256 count) external payable nonReentrant {\\r\\n        require(block.timestamp >= MINT_PRE_START_TIME, \\\"Pre-Mint not started\\\");\\r\\n        require(block.timestamp < MINT_START_TIME, \\\"Pre-Mint ended\\\");\\r\\n        require(\\r\\n            count <= whitelistPre[msg.sender],\\r\\n            \\\"Max mints for address reached\\\"\\r\\n        );\\r\\n        if (msg.sender != owner()) {\\r\\n            require(msg.value == count * MINT_COST, \\\"Incorrect payment\\\");\\r\\n        }\\r\\n\\r\\n        whitelistPre[msg.sender] -= count;\\r\\n        entriesPerAddressPre[msg.sender] += count;\\r\\n        entropy = block.number;\\r\\n\\r\\n        for (uint256 i = 0; i < count; i++) {\\r\\n            _checkedMint(msg.sender);\\r\\n        }\\r\\n        emit MintedPre(msg.sender, count);\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n    function mintPreWithToken(uint256 count, address token)\\r\\n        external\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(block.timestamp >= MINT_PRE_START_TIME, \\\"Pre-Mint not started\\\");\\r\\n        require(block.timestamp < MINT_START_TIME, \\\"Pre-Mint ended\\\");\\r\\n        require(\\r\\n            count <= whitelistPre[msg.sender],\\r\\n            \\\"Max mints for address reached\\\"\\r\\n        );\\r\\n        require(token == afin || token == mvp, \\\"Invalid Token\\\");\\r\\n        if (token == afin) {\\r\\n            if (msg.sender != owner()) {\\r\\n                require(\\r\\n                    IERC20(token).balanceOf(msg.sender) >= afinPrice * count,\\r\\n                    \\\"token amount is too low\\\"\\r\\n                );\\r\\n                IERC20(token).transferFrom(\\r\\n                    msg.sender,\\r\\n                    feeAddress,\\r\\n                    afinPrice * count\\r\\n                );\\r\\n            }\\r\\n        } else if (token == mvp) {\\r\\n            if (msg.sender != owner()) {\\r\\n                require(\\r\\n                    IERC20(token).balanceOf(msg.sender) >= mvpPrice * count,\\r\\n                    \\\"token amount is too low\\\"\\r\\n                );\\r\\n                IERC20(token).transferFrom(\\r\\n                    msg.sender,\\r\\n                    feeAddress,\\r\\n                    mvpPrice * count\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        whitelistPre[msg.sender] -= count;\\r\\n        entriesPerAddressPre[msg.sender] += count;\\r\\n        entropy = block.number;\\r\\n\\r\\n        for (uint256 i = 0; i < count; i++) {\\r\\n            _checkedMint(msg.sender);\\r\\n        }\\r\\n        emit MintedPre(msg.sender, count);\\r\\n    }\\r\\n\\r\\n    function mint(uint256 count) external payable nonReentrant {\\r\\n        require(block.timestamp >= MINT_START_TIME, \\\"Mint not started\\\");\\r\\n        if (!mintOpen) {\\r\\n            require(block.timestamp < MINT_END_TIME, \\\"Mint ended\\\");\\r\\n            require(\\r\\n                count <= whitelist[msg.sender],\\r\\n                \\\"Max mints for address reached\\\"\\r\\n            );\\r\\n            whitelist[msg.sender] -= count;\\r\\n        }\\r\\n        if (msg.sender != owner()) {\\r\\n            require(msg.value == count * MINT_COST, \\\"Incorrect payment\\\");\\r\\n        }\\r\\n\\r\\n        entriesPerAddress[msg.sender] += count;\\r\\n        entropy = block.number;\\r\\n\\r\\n        for (uint256 i = 0; i < count; i++) {\\r\\n            _checkedMint(msg.sender);\\r\\n        }\\r\\n        emit Minted(msg.sender, count);\\r\\n    }\\r\\n\\r\\n    function mintWithToken(uint256 count, address token) external nonReentrant {\\r\\n        require(block.timestamp >= MINT_START_TIME, \\\"Mint not started\\\");\\r\\n        require(token == afin || token == mvp, \\\"Invalid Token\\\");\\r\\n\\r\\n        if (!mintOpen) {\\r\\n            require(block.timestamp < MINT_END_TIME, \\\"Mint ended\\\");\\r\\n            require(\\r\\n                count <= whitelist[msg.sender],\\r\\n                \\\"Max mints for address reached\\\"\\r\\n            );\\r\\n            whitelist[msg.sender] -= count;\\r\\n        }\\r\\n        if (token == afin) {\\r\\n            if (msg.sender != owner()) {\\r\\n                require(\\r\\n                    IERC20(token).balanceOf(msg.sender) >= afinPrice * count,\\r\\n                    \\\"token amount is too low\\\"\\r\\n                );\\r\\n                IERC20(token).transferFrom(\\r\\n                    msg.sender,\\r\\n                    feeAddress,\\r\\n                    afinPrice * count\\r\\n                );\\r\\n            }\\r\\n        } else if (token == mvp) {\\r\\n            if (msg.sender != owner()) {\\r\\n                require(\\r\\n                    IERC20(token).balanceOf(msg.sender) >= mvpPrice * count,\\r\\n                    \\\"token amount is too low\\\"\\r\\n                );\\r\\n                IERC20(token).transferFrom(\\r\\n                    msg.sender,\\r\\n                    feeAddress,\\r\\n                    mvpPrice * count\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        entriesPerAddress[msg.sender] += count;\\r\\n        entropy = block.number;\\r\\n\\r\\n        for (uint256 i = 0; i < count; i++) {\\r\\n            _checkedMint(msg.sender);\\r\\n        }\\r\\n        emit Minted(msg.sender, count);\\r\\n    }\\r\\n\\r\\n    function mintCustom(uint256 count) external payable nonReentrant onlyOwner {\\r\\n        require(block.timestamp > MINT_END_TIME, \\\"Mint ended\\\");\\r\\n\\r\\n        if (msg.sender != owner()) {\\r\\n            require(msg.value == count * MINT_COST, \\\"Incorrect payment\\\");\\r\\n        }\\r\\n\\r\\n        entriesPerAddress[msg.sender] += count;\\r\\n        entropy = block.number;\\r\\n\\r\\n        for (uint256 i = 0; i < count; i++) {\\r\\n            _checkedMintCustom(msg.sender);\\r\\n        }\\r\\n        emit Minted(msg.sender, count);\\r\\n    }\\r\\n\\r\\n    function claimProceedsToken(address token) external onlyOwner {\\r\\n        require(block.timestamp >= MINT_END_TIME, \\\"Mint has not ended\\\");\\r\\n        require(IERC20(token).balanceOf(address(this)) > 0, \\\"No fund to withdraw\\\");\\r\\n\\r\\n        IERC20(token).transferFrom(\\r\\n                    address(this),\\r\\n                    msg.sender,\\r\\n                    IERC20(token).balanceOf(address(this))\\r\\n                ); \\r\\n        \\r\\n    }\\r\\n\\r\\n    function claimProceeds() external onlyOwner {\\r\\n        require(block.timestamp >= MINT_END_TIME, \\\"Mint has not ended\\\");\\r\\n        uint256 proceeds = address(this).balance;\\r\\n        (bool sent, ) = msg.sender.call{value: proceeds}(\\\"\\\");\\r\\n        require(sent, \\\"Could not send proceeds\\\");\\r\\n        emit Claimed(msg.sender, proceeds);\\r\\n    }\\r\\n\\r\\n    function startingIndex() public view returns (uint256) {\\r\\n        return entropy % AVAILABLE_SUPPLY;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        return string(abi.encodePacked(uri, tokenId.toString(), \\\".json\\\"));\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual override(ERC721, ERC721Enumerable) {\\r\\n        super._beforeTokenTransfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override(ERC721, ERC721Enumerable)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x69511bed5f7fd5034401f30a0203ca34317f5c74347698b3735872fcaece9c45\"}},\"version\":1}",
  "bytecode": "0x60a060405268a2a15d09519be0000060185569014542ba12a337c000006019553480156200002c57600080fd5b50604051620044c2380380620044c28339810160408190526200004f91620002fa565b88886200005c3362000130565b81516200007190600190602085019062000180565b5080516200008790600290602084019062000180565b50506001600b55506080879052600c869055600d859055600e849055601a80546001600160a01b038581166001600160a01b031992831617909255601b8054858416908316179055601c80549284169290911691909117905560408051878152602081018790529081018590527f3e5026851758e1ab6e995b071b048e26e92f459b047600ff68914479d5074c549060600160405180910390a150505050505050505062000416565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546200018e90620003c3565b90600052602060002090601f016020900481019282620001b25760008555620001fd565b82601f10620001cd57805160ff1916838001178555620001fd565b82800160010185558215620001fd579182015b82811115620001fd578251825591602001919060010190620001e0565b506200020b9291506200020f565b5090565b5b808211156200020b576000815560010162000210565b80516001600160a01b03811681146200023e57600080fd5b919050565b600082601f8301126200025557600080fd5b81516001600160401b038082111562000272576200027262000400565b604051601f8301601f19908116603f011681019082821181831017156200029d576200029d62000400565b81604052838152602092508683858801011115620002ba57600080fd5b600091505b83821015620002de5785820183015181830184015290820190620002bf565b83821115620002f05760008385830101525b9695505050505050565b60008060008060008060008060006101208a8c0312156200031a57600080fd5b89516001600160401b03808211156200033257600080fd5b620003408d838e0162000243565b9a5060208c01519150808211156200035757600080fd5b50620003668c828d0162000243565b98505060408a0151965060608a0151955060808a0151945060a08a015193506200039360c08b0162000226565b9250620003a360e08b0162000226565b9150620003b46101008b0162000226565b90509295985092959850929598565b600181811c90821680620003d857607f821691505b60208210811415620003fa57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805161407b62000447600039600081816108290152818161223301528181612dd70152612ec6015261407b6000f3fe60806040526004361061036b5760003560e01c80638705fcd4116101c6578063c662e481116100f7578063e853164111610095578063f013e0e11161006f578063f013e0e1146109cd578063f2fde38b146109ed578063fc58819014610a0d578063ffe630b514610a2357600080fd5b8063e85316411461094f578063e985e9c51461096f578063eac989f8146109b857600080fd5b8063cd983d8d116100d1578063cd983d8d146108d2578063cf309012146108ff578063d0081af814610919578063d3e966581461092f57600080fd5b8063c662e48114610881578063c87b56dd1461089d578063cb774d47146108bd57600080fd5b8063a0712d6811610164578063b0e07c231161013e578063b0e07c23146107f7578063b438e12e14610817578063b88d4fde1461084b578063c492547a1461086b57600080fd5b8063a0712d68146107af578063a22cb465146107c2578063a7b72294146107e257600080fd5b80638da5cb5b116101a05780638da5cb5b1461073a57806395d89b4114610758578063989bdbb61461076d5780639b19251a1461078257600080fd5b80638705fcd4146106f25780638ab1e111146107125780638c3b0ca81461072557600080fd5b80633792481c116102a05780634f6ccce71161023e57806370a082311161021857806370a082311461067a578063715018a61461069a57806373653929146106af5780637e2ade0c146106dc57600080fd5b80634f6ccce71461061a57806355f804b31461063a5780636352211e1461065a57600080fd5b806342842e0e1161027a57806342842e0e146105a4578063477c729d146105c457806347ce07cc146105e4578063485f4767146105fa57600080fd5b80633792481c146105515780633bbaac7b14610571578063412753581461058457600080fd5b80630f7309e81161030d57806322c24205116102e757806322c24205146104d257806323b872dd146104f257806324bbd049146105125780632f745c591461053157600080fd5b80630f7309e81461048857806318160ddd1461049d578063189381cd146104b257600080fd5b8063081812fc11610349578063081812fc146103eb578063095ea7b3146104235780630af2c6ca146104455780630f134ca41461045b57600080fd5b806301ffc9a71461037057806306fdde03146103a557806307bd6322146103c7575b600080fd5b34801561037c57600080fd5b5061039061038b3660046139da565b610a43565b60405190151581526020015b60405180910390f35b3480156103b157600080fd5b506103ba610a54565b60405161039c9190613c9a565b3480156103d357600080fd5b506103dd600e5481565b60405190815260200161039c565b3480156103f757600080fd5b5061040b610406366004613a86565b610ae6565b6040516001600160a01b03909116815260200161039c565b34801561042f57600080fd5b5061044361043e366004613927565b610b80565b005b34801561045157600080fd5b506103dd60175481565b34801561046757600080fd5b506103dd610476366004613783565b600f6020526000908152604090205481565b34801561049457600080fd5b506103ba610c96565b3480156104a957600080fd5b506009546103dd565b3480156104be57600080fd5b50601a5461040b906001600160a01b031681565b3480156104de57600080fd5b506104436104ed366004613951565b610d24565b3480156104fe57600080fd5b5061044361050d3660046137d8565b610ed9565b34801561051e57600080fd5b5060155461039090610100900460ff1681565b34801561053d57600080fd5b506103dd61054c366004613927565b610f0a565b34801561055d57600080fd5b5061044361056c366004613ab8565b610fa0565b61044361057f366004613a86565b611480565b34801561059057600080fd5b50601c5461040b906001600160a01b031681565b3480156105b057600080fd5b506104436105bf3660046137d8565b611655565b3480156105d057600080fd5b50601b5461040b906001600160a01b031681565b3480156105f057600080fd5b506103dd60165481565b34801561060657600080fd5b50610443610615366004613ab8565b611670565b34801561062657600080fd5b506103dd610635366004613a86565b61173f565b34801561064657600080fd5b50610443610655366004613a14565b6117d2565b34801561066657600080fd5b5061040b610675366004613a86565b61188b565b34801561068657600080fd5b506103dd610695366004613783565b611902565b3480156106a657600080fd5b50610443611989565b3480156106bb57600080fd5b506103dd6106ca366004613783565b60126020526000908152604090205481565b3480156106e857600080fd5b506103dd600d5481565b3480156106fe57600080fd5b5061044361070d366004613783565b6119bf565b610443610720366004613a86565b611a3d565b34801561073157600080fd5b50610443611b73565b34801561074657600080fd5b506000546001600160a01b031661040b565b34801561076457600080fd5b506103ba611cb7565b34801561077957600080fd5b50610443611cc6565b34801561078e57600080fd5b506103dd61079d366004613783565b60106020526000908152604090205481565b6104436107bd366004613a86565b611d28565b3480156107ce57600080fd5b506104436107dd3660046138f0565b611ea9565b3480156107ee57600080fd5b50610443611eb4565b34801561080357600080fd5b50610443610812366004613783565b611f24565b34801561082357600080fd5b506103dd7f000000000000000000000000000000000000000000000000000000000000000081565b34801561085757600080fd5b50610443610866366004613814565b612146565b34801561087757600080fd5b506103dd600c5481565b34801561088d57600080fd5b506103dd6706f05b59d3b2000081565b3480156108a957600080fd5b506103ba6108b8366004613a86565b61217e565b3480156108c957600080fd5b506103dd61222f565b3480156108de57600080fd5b506103dd6108ed366004613783565b60116020526000908152604090205481565b34801561090b57600080fd5b506015546103909060ff1681565b34801561092557600080fd5b506103dd60185481565b34801561093b57600080fd5b5061044361094a366004613adb565b612264565b34801561095b57600080fd5b5061044361096a366004613ab8565b6122e3565b34801561097b57600080fd5b5061039061098a3660046137a5565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b3480156109c457600080fd5b506103ba6127a1565b3480156109d957600080fd5b506104436109e8366004613951565b6127ae565b3480156109f957600080fd5b50610443610a08366004613783565b61295c565b348015610a1957600080fd5b506103dd60195481565b348015610a2f57600080fd5b50610443610a3e366004613a14565b6129f7565b6000610a4e82612aa4565b92915050565b606060018054610a6390613f49565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8f90613f49565b8015610adc5780601f10610ab157610100808354040283529160200191610adc565b820191906000526020600020905b815481529060010190602001808311610abf57829003601f168201915b5050505050905090565b6000818152600360205260408120546001600160a01b0316610b645760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b6000610b8b8261188b565b9050806001600160a01b0316836001600160a01b03161415610bf95760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610b5b565b336001600160a01b0382161480610c155750610c15813361098a565b610c875760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610b5b565b610c918383612ac9565b505050565b60148054610ca390613f49565b80601f0160208091040260200160405190810160405280929190818152602001828054610ccf90613f49565b8015610d1c5780601f10610cf157610100808354040283529160200191610d1c565b820191906000526020600020905b815481529060010190602001808311610cff57829003601f168201915b505050505081565b6000546001600160a01b03163314610d4e5760405162461bcd60e51b8152600401610b5b90613dda565b828114610d6d5760405162461bcd60e51b8152600401610b5b90613d98565b60005b83811015610ed2576000858583818110610d8c57610d8c613ff5565b9050602002016020810190610da19190613783565b6001600160a01b03161415610de15760405162461bcd60e51b8152600401610b5b906020808252600490820152637a65726f60e01b604082015260600190565b828282818110610df357610df3613ff5565b90506020020135600f6000878785818110610e1057610e10613ff5565b9050602002016020810190610e259190613783565b6001600160a01b03168152602081019190915260400160002055848482818110610e5157610e51613ff5565b9050602002016020810190610e669190613783565b6001600160a01b03167f69561778ac97dfc2d31e860092bca67d1ebce2d3f486e1210aa13f0e9a2a6fe9848484818110610ea257610ea2613ff5565b90506020020135604051610eb891815260200190565b60405180910390a280610eca81613f84565b915050610d70565b5050505050565b610ee33382612b37565b610eff5760405162461bcd60e51b8152600401610b5b90613e33565b610c91838383612c2e565b6000610f1583611902565b8210610f775760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610b5b565b506001600160a01b03919091166000908152600760209081526040808320938352929052205490565b6002600b541415610fc35760405162461bcd60e51b8152600401610b5b90613e84565b6002600b55600c544210156110115760405162461bcd60e51b8152602060048201526014602482015273141c994b535a5b9d081b9bdd081cdd185c9d195960621b6044820152606401610b5b565b600d5442106110535760405162461bcd60e51b815260206004820152600e60248201526d141c994b535a5b9d08195b99195960921b6044820152606401610b5b565b336000908152600f60205260409020548211156110825760405162461bcd60e51b8152600401610b5b90613d61565b601a546001600160a01b03828116911614806110ab5750601b546001600160a01b038281169116145b6110e75760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b2102a37b5b2b760991b6044820152606401610b5b565b601a546001600160a01b038281169116141561125d576000546001600160a01b03163314611258578160185461111d9190613ee7565b6040516370a0823160e01b81523360048201526001600160a01b038316906370a082319060240160206040518083038186803b15801561115c57600080fd5b505afa158015611170573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111949190613a9f565b10156111b25760405162461bcd60e51b8152600401610b5b90613d2a565b806001600160a01b03166323b872dd33601c60009054906101000a90046001600160a01b0316856018546111e69190613ee7565b6040518463ffffffff1660e01b815260040161120493929190613c0a565b602060405180830381600087803b15801561121e57600080fd5b505af1158015611232573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125691906139bd565b505b6113ce565b601b546001600160a01b03828116911614156113ce576000546001600160a01b031633146113ce57816019546112939190613ee7565b6040516370a0823160e01b81523360048201526001600160a01b038316906370a082319060240160206040518083038186803b1580156112d257600080fd5b505afa1580156112e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130a9190613a9f565b10156113285760405162461bcd60e51b8152600401610b5b90613d2a565b806001600160a01b03166323b872dd33601c60009054906101000a90046001600160a01b03168560195461135c9190613ee7565b6040518463ffffffff1660e01b815260040161137a93929190613c0a565b602060405180830381600087803b15801561139457600080fd5b505af11580156113a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cc91906139bd565b505b336000908152600f6020526040812080548492906113ed908490613f06565b90915550503360009081526011602052604081208054849290611411908490613ebb565b90915550504360165560005b828110156114405761142e33612dd5565b8061143881613f84565b91505061141d565b5060405182815233907f925f730a5ad66a8169d9e681b6feed65b2a165b2d93d33fce9d83b699f247914906020015b60405180910390a250506001600b55565b6002600b5414156114a35760405162461bcd60e51b8152600401610b5b90613e84565b6002600b55600c544210156114f15760405162461bcd60e51b8152602060048201526014602482015273141c994b535a5b9d081b9bdd081cdd185c9d195960621b6044820152606401610b5b565b600d5442106115335760405162461bcd60e51b815260206004820152600e60248201526d141c994b535a5b9d08195b99195960921b6044820152606401610b5b565b336000908152600f60205260409020548111156115625760405162461bcd60e51b8152600401610b5b90613d61565b6000546001600160a01b031633146115a4576115866706f05b59d3b2000082613ee7565b34146115a45760405162461bcd60e51b8152600401610b5b90613cad565b336000908152600f6020526040812080548392906115c3908490613f06565b909155505033600090815260116020526040812080548392906115e7908490613ebb565b90915550504360165560005b818110156116165761160433612dd5565b8061160e81613f84565b9150506115f3565b5060405181815233907f925f730a5ad66a8169d9e681b6feed65b2a165b2d93d33fce9d83b699f247914906020015b60405180910390a2506001600b55565b610c9183838360405180602001604052806000815250612146565b6000546001600160a01b0316331461169a5760405162461bcd60e51b8152600401610b5b90613dda565b601a546001600160a01b03828116911614806116c35750601b546001600160a01b038281169116145b6117035760405162461bcd60e51b81526020600482015260116024820152703ab739bab83837b93a32b2103a37b5b2b760791b6044820152606401610b5b565b601a546001600160a01b038281169116141561171f5750601855565b601b546001600160a01b038281169116141561173b5760198290555b5050565b600061174a60095490565b82106117ad5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610b5b565b600982815481106117c0576117c0613ff5565b90600052602060002001549050919050565b6000546001600160a01b031633146117fc5760405162461bcd60e51b8152600401610b5b90613dda565b60155460ff16156118415760405162461bcd60e51b815260206004820152600f60248201526e13595d1859185d18481b1bd8dad959608a1b6044820152606401610b5b565b61184d60138383613682565b507f23c8c9488efebfd474e85a7956de6f39b17c7ab88502d42a623db2d8e382bbaa828260405161187f929190613c6b565b60405180910390a15050565b6000818152600360205260408120546001600160a01b031680610a4e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610b5b565b60006001600160a01b03821661196d5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610b5b565b506001600160a01b031660009081526004602052604090205490565b6000546001600160a01b031633146119b35760405162461bcd60e51b8152600401610b5b90613dda565b6119bd6000612e71565b565b6000546001600160a01b031633146119e95760405162461bcd60e51b8152600401610b5b90613dda565b601c80546001600160a01b0319166001600160a01b0383169081179091556040519081527ffcb8a963756b148f85a52537b63147b6c4b40af694099c901ac3b99d317a2db89060200160405180910390a150565b6002600b541415611a605760405162461bcd60e51b8152600401610b5b90613e84565b6002600b556000546001600160a01b03163314611a8f5760405162461bcd60e51b8152600401610b5b90613dda565b600e544211611ab05760405162461bcd60e51b8152600401610b5b90613e0f565b6000546001600160a01b03163314611af257611ad46706f05b59d3b2000082613ee7565b3414611af25760405162461bcd60e51b8152600401610b5b90613cad565b3360009081526012602052604081208054839290611b11908490613ebb565b90915550504360165560005b81811015611b4057611b2e33612ec1565b80611b3881613f84565b915050611b1d565b5060405181815233907f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe90602001611645565b6000546001600160a01b03163314611b9d5760405162461bcd60e51b8152600401610b5b90613dda565b600e54421015611be45760405162461bcd60e51b8152602060048201526012602482015271135a5b9d081a185cc81b9bdd08195b99195960721b6044820152606401610b5b565b6040514790600090339083908381818185875af1925050503d8060008114611c28576040519150601f19603f3d011682016040523d82523d6000602084013e611c2d565b606091505b5050905080611c7e5760405162461bcd60e51b815260206004820152601760248201527f436f756c64206e6f742073656e642070726f63656564730000000000000000006044820152606401610b5b565b60405182815233907fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a9060200160405180910390a25050565b606060028054610a6390613f49565b6000546001600160a01b03163314611cf05760405162461bcd60e51b8152600401610b5b90613dda565b6015805460ff191660011790556040517f0f2e5b6c72c6a4491efd919a9f9a409f324ef0708c11ee57d410c2cb06c0992b90600090a1565b6002600b541415611d4b5760405162461bcd60e51b8152600401610b5b90613e84565b6002600b55600d54421015611d955760405162461bcd60e51b815260206004820152601060248201526f135a5b9d081b9bdd081cdd185c9d195960821b6044820152606401610b5b565b601554610100900460ff16611e1957600e544210611dc55760405162461bcd60e51b8152600401610b5b90613e0f565b33600090815260106020526040902054811115611df45760405162461bcd60e51b8152600401610b5b90613d61565b3360009081526010602052604081208054839290611e13908490613f06565b90915550505b6000546001600160a01b03163314611e5b57611e3d6706f05b59d3b2000082613ee7565b3414611e5b5760405162461bcd60e51b8152600401610b5b90613cad565b3360009081526012602052604081208054839290611e7a908490613ebb565b90915550504360165560005b81811015611b4057611e9733612dd5565b80611ea181613f84565b915050611e86565b61173b338383612f37565b6000546001600160a01b03163314611ede5760405162461bcd60e51b8152600401610b5b90613dda565b6015805461ff001981166101009182900460ff16159091021790556040517f98bc8e6193430ff4877b42d69dfbee87f60c67a35b201e9e9402fa4fc4befae690600090a1565b6000546001600160a01b03163314611f4e5760405162461bcd60e51b8152600401610b5b90613dda565b600e54421015611f955760405162461bcd60e51b8152602060048201526012602482015271135a5b9d081a185cc81b9bdd08195b99195960721b6044820152606401610b5b565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015611fd757600080fd5b505afa158015611feb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200f9190613a9f565b116120525760405162461bcd60e51b81526020600482015260136024820152724e6f2066756e6420746f20776974686472617760681b6044820152606401610b5b565b6040516370a0823160e01b815230600482018190526001600160a01b038316916323b872dd9190339084906370a082319060240160206040518083038186803b15801561209e57600080fd5b505afa1580156120b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d69190613a9f565b6040518463ffffffff1660e01b81526004016120f493929190613c0a565b602060405180830381600087803b15801561210e57600080fd5b505af1158015612122573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173b91906139bd565b6121503383612b37565b61216c5760405162461bcd60e51b8152600401610b5b90613e33565b61217884848484613006565b50505050565b6000818152600360205260409020546060906001600160a01b03166121fd5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610b5b565b601361220883613039565b604051602001612219929190613b4f565b6040516020818303038152906040529050919050565b60007f000000000000000000000000000000000000000000000000000000000000000060165461225f9190613f9f565b905090565b6000546001600160a01b0316331461228e5760405162461bcd60e51b8152600401610b5b90613dda565b600c839055600d829055600e81905560408051848152602081018490529081018290527f3e5026851758e1ab6e995b071b048e26e92f459b047600ff68914479d5074c549060600160405180910390a1505050565b6002600b5414156123065760405162461bcd60e51b8152600401610b5b90613e84565b6002600b55600d544210156123505760405162461bcd60e51b815260206004820152601060248201526f135a5b9d081b9bdd081cdd185c9d195960821b6044820152606401610b5b565b601a546001600160a01b03828116911614806123795750601b546001600160a01b038281169116145b6123b55760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b2102a37b5b2b760991b6044820152606401610b5b565b601554610100900460ff1661243957600e5442106123e55760405162461bcd60e51b8152600401610b5b90613e0f565b336000908152601060205260409020548211156124145760405162461bcd60e51b8152600401610b5b90613d61565b3360009081526010602052604081208054849290612433908490613f06565b90915550505b601a546001600160a01b03828116911614156125af576000546001600160a01b031633146125aa578160185461246f9190613ee7565b6040516370a0823160e01b81523360048201526001600160a01b038316906370a082319060240160206040518083038186803b1580156124ae57600080fd5b505afa1580156124c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e69190613a9f565b10156125045760405162461bcd60e51b8152600401610b5b90613d2a565b806001600160a01b03166323b872dd33601c60009054906101000a90046001600160a01b0316856018546125389190613ee7565b6040518463ffffffff1660e01b815260040161255693929190613c0a565b602060405180830381600087803b15801561257057600080fd5b505af1158015612584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a891906139bd565b505b612720565b601b546001600160a01b0382811691161415612720576000546001600160a01b0316331461272057816019546125e59190613ee7565b6040516370a0823160e01b81523360048201526001600160a01b038316906370a082319060240160206040518083038186803b15801561262457600080fd5b505afa158015612638573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265c9190613a9f565b101561267a5760405162461bcd60e51b8152600401610b5b90613d2a565b806001600160a01b03166323b872dd33601c60009054906101000a90046001600160a01b0316856019546126ae9190613ee7565b6040518463ffffffff1660e01b81526004016126cc93929190613c0a565b602060405180830381600087803b1580156126e657600080fd5b505af11580156126fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271e91906139bd565b505b336000908152601260205260408120805484929061273f908490613ebb565b90915550504360165560005b8281101561276e5761275c33612dd5565b8061276681613f84565b91505061274b565b5060405182815233907f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe9060200161146f565b60138054610ca390613f49565b6000546001600160a01b031633146127d85760405162461bcd60e51b8152600401610b5b90613dda565b8281146127f75760405162461bcd60e51b8152600401610b5b90613d98565b60005b83811015610ed257600085858381811061281657612816613ff5565b905060200201602081019061282b9190613783565b6001600160a01b0316141561286b5760405162461bcd60e51b8152600401610b5b906020808252600490820152635a65726f60e01b604082015260600190565b82828281811061287d5761287d613ff5565b905060200201356010600087878581811061289a5761289a613ff5565b90506020020160208101906128af9190613783565b6001600160a01b031681526020810191909152604001600020558484828181106128db576128db613ff5565b90506020020160208101906128f09190613783565b6001600160a01b03167f6ea640312e182de387819fbeb13be00db3171a445412852248559054871c419984848481811061292c5761292c613ff5565b9050602002013560405161294291815260200190565b60405180910390a28061295481613f84565b9150506127fa565b6000546001600160a01b031633146129865760405162461bcd60e51b8152600401610b5b90613dda565b6001600160a01b0381166129eb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b5b565b6129f481612e71565b50565b6000546001600160a01b03163314612a215760405162461bcd60e51b8152600401610b5b90613dda565b60155460ff1615612a665760405162461bcd60e51b815260206004820152600f60248201526e13595d1859185d18481b1bd8dad959608a1b6044820152606401610b5b565b612a7260148383613682565b507f9a15466c5caef68c45172698c3e94fec7de42c88676fa00817bde701c8df8903828260405161187f929190613c6b565b60006001600160e01b0319821663780e9d6360e01b1480610a4e5750610a4e82613137565b600081815260056020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612afe8261188b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600360205260408120546001600160a01b0316612bb05760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610b5b565b6000612bbb8361188b565b9050806001600160a01b0316846001600160a01b03161480612bf65750836001600160a01b0316612beb84610ae6565b6001600160a01b0316145b80612c2657506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316612c418261188b565b6001600160a01b031614612ca55760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610b5b565b6001600160a01b038216612d075760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610b5b565b612d12838383613187565b612d1d600082612ac9565b6001600160a01b0383166000908152600460205260408120805460019290612d46908490613f06565b90915550506001600160a01b0382166000908152600460205260408120805460019290612d74908490613ebb565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b7f000000000000000000000000000000000000000000000000000000000000000060175410612e415760405162461bcd60e51b8152602060048201526018602482015277105d985a5b18589b19481cdd5c1c1b1e481c995858da195960421b6044820152606401610b5b565b612e59336017546001612e549190613ebb565b613192565b60178054906000612e6983613f84565b919050555050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612eec7f0000000000000000000000000000000000000000000000000000000000000000603c613ebb565b60175410612e415760405162461bcd60e51b8152602060048201526018602482015277105d985a5b18589b19481cdd5c1c1b1e481c995858da195960421b6044820152606401610b5b565b816001600160a01b0316836001600160a01b03161415612f995760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610b5b565b6001600160a01b03838116600081815260066020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b613011848484612c2e565b61301d848484846131ac565b6121785760405162461bcd60e51b8152600401610b5b90613cd8565b60608161305d5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115613087578061307181613f84565b91506130809050600a83613ed3565b9150613061565b60008167ffffffffffffffff8111156130a2576130a261400b565b6040519080825280601f01601f1916602001820160405280156130cc576020820181803683370190505b5090505b8415612c26576130e1600183613f06565b91506130ee600a86613f9f565b6130f9906030613ebb565b60f81b81838151811061310e5761310e613ff5565b60200101906001600160f81b031916908160001a905350613130600a86613ed3565b94506130d0565b60006001600160e01b031982166380ac58cd60e01b148061316857506001600160e01b03198216635b5e139f60e01b145b80610a4e57506301ffc9a760e01b6001600160e01b0319831614610a4e565b610c918383836132b9565b61173b828260405180602001604052806000815250613371565b60006001600160a01b0384163b156132ae57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906131f0903390899088908890600401613c2e565b602060405180830381600087803b15801561320a57600080fd5b505af192505050801561323a575060408051601f3d908101601f19168201909252613237918101906139f7565b60015b613294573d808015613268576040519150601f19603f3d011682016040523d82523d6000602084013e61326d565b606091505b50805161328c5760405162461bcd60e51b8152600401610b5b90613cd8565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612c26565b506001949350505050565b6001600160a01b0383166133145761330f81600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0155565b613337565b816001600160a01b0316836001600160a01b0316146133375761333783826133a4565b6001600160a01b03821661334e57610c9181613441565b826001600160a01b0316826001600160a01b031614610c9157610c9182826134f0565b61337b8383613534565b61338860008484846131ac565b610c915760405162461bcd60e51b8152600401610b5b90613cd8565b600060016133b184611902565b6133bb9190613f06565b60008381526008602052604090205490915080821461340e576001600160a01b03841660009081526007602090815260408083208584528252808320548484528184208190558352600890915290208190555b5060009182526008602090815260408084208490556001600160a01b039094168352600781528383209183525290812055565b60095460009061345390600190613f06565b6000838152600a60205260408120546009805493945090928490811061347b5761347b613ff5565b90600052602060002001549050806009838154811061349c5761349c613ff5565b6000918252602080832090910192909255828152600a909152604080822084905585825281205560098054806134d4576134d4613fdf565b6001900381819060005260206000200160009055905550505050565b60006134fb83611902565b6001600160a01b039093166000908152600760209081526040808320868452825280832085905593825260089052919091209190915550565b6001600160a01b03821661358a5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610b5b565b6000818152600360205260409020546001600160a01b0316156135ef5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610b5b565b6135fb60008383613187565b6001600160a01b0382166000908152600460205260408120805460019290613624908490613ebb565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805461368e90613f49565b90600052602060002090601f0160209004810192826136b057600085556136f6565b82601f106136c95782800160ff198235161785556136f6565b828001600101855582156136f6579182015b828111156136f65782358255916020019190600101906136db565b50613702929150613706565b5090565b5b808211156137025760008155600101613707565b80356001600160a01b038116811461373257600080fd5b919050565b60008083601f84011261374957600080fd5b50813567ffffffffffffffff81111561376157600080fd5b6020830191508360208260051b850101111561377c57600080fd5b9250929050565b60006020828403121561379557600080fd5b61379e8261371b565b9392505050565b600080604083850312156137b857600080fd5b6137c18361371b565b91506137cf6020840161371b565b90509250929050565b6000806000606084860312156137ed57600080fd5b6137f68461371b565b92506138046020850161371b565b9150604084013590509250925092565b6000806000806080858703121561382a57600080fd5b6138338561371b565b93506138416020860161371b565b925060408501359150606085013567ffffffffffffffff8082111561386557600080fd5b818701915087601f83011261387957600080fd5b81358181111561388b5761388b61400b565b604051601f8201601f19908116603f011681019083821181831017156138b3576138b361400b565b816040528281528a60208487010111156138cc57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561390357600080fd5b61390c8361371b565b9150602083013561391c81614021565b809150509250929050565b6000806040838503121561393a57600080fd5b6139438361371b565b946020939093013593505050565b6000806000806040858703121561396757600080fd5b843567ffffffffffffffff8082111561397f57600080fd5b61398b88838901613737565b909650945060208701359150808211156139a457600080fd5b506139b187828801613737565b95989497509550505050565b6000602082840312156139cf57600080fd5b815161379e81614021565b6000602082840312156139ec57600080fd5b813561379e8161402f565b600060208284031215613a0957600080fd5b815161379e8161402f565b60008060208385031215613a2757600080fd5b823567ffffffffffffffff80821115613a3f57600080fd5b818501915085601f830112613a5357600080fd5b813581811115613a6257600080fd5b866020828501011115613a7457600080fd5b60209290920196919550909350505050565b600060208284031215613a9857600080fd5b5035919050565b600060208284031215613ab157600080fd5b5051919050565b60008060408385031215613acb57600080fd5b823591506137cf6020840161371b565b600080600060608486031215613af057600080fd5b505081359360208301359350604090920135919050565b60008151808452613b1f816020860160208601613f1d565b601f01601f19169290920160200192915050565b60008151613b45818560208601613f1d565b9290920192915050565b600080845481600182811c915080831680613b6b57607f831692505b6020808410821415613b8b57634e487b7160e01b86526022600452602486fd5b818015613b9f5760018114613bb057613bdd565b60ff19861689528489019650613bdd565b60008b81526020902060005b86811015613bd55781548b820152908501908301613bbc565b505084890196505b505050505050613c01613bf08286613b33565b64173539b7b760d91b815260050190565b95945050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613c6190830184613b07565b9695505050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60208152600061379e6020830184613b07565b602080825260119082015270125b98dbdc9c9958dd081c185e5b595b9d607a1b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526017908201527f746f6b656e20616d6f756e7420697320746f6f206c6f77000000000000000000604082015260600190565b6020808252601d908201527f4d6178206d696e747320666f7220616464726573732072656163686564000000604082015260600190565b60208082526022908201527f416464726573736573206c656e67746820213d20656e7472696573206c656e676040820152610e8d60f31b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600a9082015269135a5b9d08195b99195960b21b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115613ece57613ece613fb3565b500190565b600082613ee257613ee2613fc9565b500490565b6000816000190483118215151615613f0157613f01613fb3565b500290565b600082821015613f1857613f18613fb3565b500390565b60005b83811015613f38578181015183820152602001613f20565b838111156121785750506000910152565b600181811c90821680613f5d57607f821691505b60208210811415613f7e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613f9857613f98613fb3565b5060010190565b600082613fae57613fae613fc9565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146129f457600080fd5b6001600160e01b0319811681146129f457600080fdfea2646970667358221220e75fb5e4cd14f7f56d974471d9a1ced629bb59078d68a59cfe22c777113cd2bf64736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061036b5760003560e01c80638705fcd4116101c6578063c662e481116100f7578063e853164111610095578063f013e0e11161006f578063f013e0e1146109cd578063f2fde38b146109ed578063fc58819014610a0d578063ffe630b514610a2357600080fd5b8063e85316411461094f578063e985e9c51461096f578063eac989f8146109b857600080fd5b8063cd983d8d116100d1578063cd983d8d146108d2578063cf309012146108ff578063d0081af814610919578063d3e966581461092f57600080fd5b8063c662e48114610881578063c87b56dd1461089d578063cb774d47146108bd57600080fd5b8063a0712d6811610164578063b0e07c231161013e578063b0e07c23146107f7578063b438e12e14610817578063b88d4fde1461084b578063c492547a1461086b57600080fd5b8063a0712d68146107af578063a22cb465146107c2578063a7b72294146107e257600080fd5b80638da5cb5b116101a05780638da5cb5b1461073a57806395d89b4114610758578063989bdbb61461076d5780639b19251a1461078257600080fd5b80638705fcd4146106f25780638ab1e111146107125780638c3b0ca81461072557600080fd5b80633792481c116102a05780634f6ccce71161023e57806370a082311161021857806370a082311461067a578063715018a61461069a57806373653929146106af5780637e2ade0c146106dc57600080fd5b80634f6ccce71461061a57806355f804b31461063a5780636352211e1461065a57600080fd5b806342842e0e1161027a57806342842e0e146105a4578063477c729d146105c457806347ce07cc146105e4578063485f4767146105fa57600080fd5b80633792481c146105515780633bbaac7b14610571578063412753581461058457600080fd5b80630f7309e81161030d57806322c24205116102e757806322c24205146104d257806323b872dd146104f257806324bbd049146105125780632f745c591461053157600080fd5b80630f7309e81461048857806318160ddd1461049d578063189381cd146104b257600080fd5b8063081812fc11610349578063081812fc146103eb578063095ea7b3146104235780630af2c6ca146104455780630f134ca41461045b57600080fd5b806301ffc9a71461037057806306fdde03146103a557806307bd6322146103c7575b600080fd5b34801561037c57600080fd5b5061039061038b3660046139da565b610a43565b60405190151581526020015b60405180910390f35b3480156103b157600080fd5b506103ba610a54565b60405161039c9190613c9a565b3480156103d357600080fd5b506103dd600e5481565b60405190815260200161039c565b3480156103f757600080fd5b5061040b610406366004613a86565b610ae6565b6040516001600160a01b03909116815260200161039c565b34801561042f57600080fd5b5061044361043e366004613927565b610b80565b005b34801561045157600080fd5b506103dd60175481565b34801561046757600080fd5b506103dd610476366004613783565b600f6020526000908152604090205481565b34801561049457600080fd5b506103ba610c96565b3480156104a957600080fd5b506009546103dd565b3480156104be57600080fd5b50601a5461040b906001600160a01b031681565b3480156104de57600080fd5b506104436104ed366004613951565b610d24565b3480156104fe57600080fd5b5061044361050d3660046137d8565b610ed9565b34801561051e57600080fd5b5060155461039090610100900460ff1681565b34801561053d57600080fd5b506103dd61054c366004613927565b610f0a565b34801561055d57600080fd5b5061044361056c366004613ab8565b610fa0565b61044361057f366004613a86565b611480565b34801561059057600080fd5b50601c5461040b906001600160a01b031681565b3480156105b057600080fd5b506104436105bf3660046137d8565b611655565b3480156105d057600080fd5b50601b5461040b906001600160a01b031681565b3480156105f057600080fd5b506103dd60165481565b34801561060657600080fd5b50610443610615366004613ab8565b611670565b34801561062657600080fd5b506103dd610635366004613a86565b61173f565b34801561064657600080fd5b50610443610655366004613a14565b6117d2565b34801561066657600080fd5b5061040b610675366004613a86565b61188b565b34801561068657600080fd5b506103dd610695366004613783565b611902565b3480156106a657600080fd5b50610443611989565b3480156106bb57600080fd5b506103dd6106ca366004613783565b60126020526000908152604090205481565b3480156106e857600080fd5b506103dd600d5481565b3480156106fe57600080fd5b5061044361070d366004613783565b6119bf565b610443610720366004613a86565b611a3d565b34801561073157600080fd5b50610443611b73565b34801561074657600080fd5b506000546001600160a01b031661040b565b34801561076457600080fd5b506103ba611cb7565b34801561077957600080fd5b50610443611cc6565b34801561078e57600080fd5b506103dd61079d366004613783565b60106020526000908152604090205481565b6104436107bd366004613a86565b611d28565b3480156107ce57600080fd5b506104436107dd3660046138f0565b611ea9565b3480156107ee57600080fd5b50610443611eb4565b34801561080357600080fd5b50610443610812366004613783565b611f24565b34801561082357600080fd5b506103dd7f000000000000000000000000000000000000000000000000000000000000000081565b34801561085757600080fd5b50610443610866366004613814565b612146565b34801561087757600080fd5b506103dd600c5481565b34801561088d57600080fd5b506103dd6706f05b59d3b2000081565b3480156108a957600080fd5b506103ba6108b8366004613a86565b61217e565b3480156108c957600080fd5b506103dd61222f565b3480156108de57600080fd5b506103dd6108ed366004613783565b60116020526000908152604090205481565b34801561090b57600080fd5b506015546103909060ff1681565b34801561092557600080fd5b506103dd60185481565b34801561093b57600080fd5b5061044361094a366004613adb565b612264565b34801561095b57600080fd5b5061044361096a366004613ab8565b6122e3565b34801561097b57600080fd5b5061039061098a3660046137a5565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b3480156109c457600080fd5b506103ba6127a1565b3480156109d957600080fd5b506104436109e8366004613951565b6127ae565b3480156109f957600080fd5b50610443610a08366004613783565b61295c565b348015610a1957600080fd5b506103dd60195481565b348015610a2f57600080fd5b50610443610a3e366004613a14565b6129f7565b6000610a4e82612aa4565b92915050565b606060018054610a6390613f49565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8f90613f49565b8015610adc5780601f10610ab157610100808354040283529160200191610adc565b820191906000526020600020905b815481529060010190602001808311610abf57829003601f168201915b5050505050905090565b6000818152600360205260408120546001600160a01b0316610b645760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600560205260409020546001600160a01b031690565b6000610b8b8261188b565b9050806001600160a01b0316836001600160a01b03161415610bf95760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610b5b565b336001600160a01b0382161480610c155750610c15813361098a565b610c875760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610b5b565b610c918383612ac9565b505050565b60148054610ca390613f49565b80601f0160208091040260200160405190810160405280929190818152602001828054610ccf90613f49565b8015610d1c5780601f10610cf157610100808354040283529160200191610d1c565b820191906000526020600020905b815481529060010190602001808311610cff57829003601f168201915b505050505081565b6000546001600160a01b03163314610d4e5760405162461bcd60e51b8152600401610b5b90613dda565b828114610d6d5760405162461bcd60e51b8152600401610b5b90613d98565b60005b83811015610ed2576000858583818110610d8c57610d8c613ff5565b9050602002016020810190610da19190613783565b6001600160a01b03161415610de15760405162461bcd60e51b8152600401610b5b906020808252600490820152637a65726f60e01b604082015260600190565b828282818110610df357610df3613ff5565b90506020020135600f6000878785818110610e1057610e10613ff5565b9050602002016020810190610e259190613783565b6001600160a01b03168152602081019190915260400160002055848482818110610e5157610e51613ff5565b9050602002016020810190610e669190613783565b6001600160a01b03167f69561778ac97dfc2d31e860092bca67d1ebce2d3f486e1210aa13f0e9a2a6fe9848484818110610ea257610ea2613ff5565b90506020020135604051610eb891815260200190565b60405180910390a280610eca81613f84565b915050610d70565b5050505050565b610ee33382612b37565b610eff5760405162461bcd60e51b8152600401610b5b90613e33565b610c91838383612c2e565b6000610f1583611902565b8210610f775760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610b5b565b506001600160a01b03919091166000908152600760209081526040808320938352929052205490565b6002600b541415610fc35760405162461bcd60e51b8152600401610b5b90613e84565b6002600b55600c544210156110115760405162461bcd60e51b8152602060048201526014602482015273141c994b535a5b9d081b9bdd081cdd185c9d195960621b6044820152606401610b5b565b600d5442106110535760405162461bcd60e51b815260206004820152600e60248201526d141c994b535a5b9d08195b99195960921b6044820152606401610b5b565b336000908152600f60205260409020548211156110825760405162461bcd60e51b8152600401610b5b90613d61565b601a546001600160a01b03828116911614806110ab5750601b546001600160a01b038281169116145b6110e75760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b2102a37b5b2b760991b6044820152606401610b5b565b601a546001600160a01b038281169116141561125d576000546001600160a01b03163314611258578160185461111d9190613ee7565b6040516370a0823160e01b81523360048201526001600160a01b038316906370a082319060240160206040518083038186803b15801561115c57600080fd5b505afa158015611170573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111949190613a9f565b10156111b25760405162461bcd60e51b8152600401610b5b90613d2a565b806001600160a01b03166323b872dd33601c60009054906101000a90046001600160a01b0316856018546111e69190613ee7565b6040518463ffffffff1660e01b815260040161120493929190613c0a565b602060405180830381600087803b15801561121e57600080fd5b505af1158015611232573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125691906139bd565b505b6113ce565b601b546001600160a01b03828116911614156113ce576000546001600160a01b031633146113ce57816019546112939190613ee7565b6040516370a0823160e01b81523360048201526001600160a01b038316906370a082319060240160206040518083038186803b1580156112d257600080fd5b505afa1580156112e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130a9190613a9f565b10156113285760405162461bcd60e51b8152600401610b5b90613d2a565b806001600160a01b03166323b872dd33601c60009054906101000a90046001600160a01b03168560195461135c9190613ee7565b6040518463ffffffff1660e01b815260040161137a93929190613c0a565b602060405180830381600087803b15801561139457600080fd5b505af11580156113a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cc91906139bd565b505b336000908152600f6020526040812080548492906113ed908490613f06565b90915550503360009081526011602052604081208054849290611411908490613ebb565b90915550504360165560005b828110156114405761142e33612dd5565b8061143881613f84565b91505061141d565b5060405182815233907f925f730a5ad66a8169d9e681b6feed65b2a165b2d93d33fce9d83b699f247914906020015b60405180910390a250506001600b55565b6002600b5414156114a35760405162461bcd60e51b8152600401610b5b90613e84565b6002600b55600c544210156114f15760405162461bcd60e51b8152602060048201526014602482015273141c994b535a5b9d081b9bdd081cdd185c9d195960621b6044820152606401610b5b565b600d5442106115335760405162461bcd60e51b815260206004820152600e60248201526d141c994b535a5b9d08195b99195960921b6044820152606401610b5b565b336000908152600f60205260409020548111156115625760405162461bcd60e51b8152600401610b5b90613d61565b6000546001600160a01b031633146115a4576115866706f05b59d3b2000082613ee7565b34146115a45760405162461bcd60e51b8152600401610b5b90613cad565b336000908152600f6020526040812080548392906115c3908490613f06565b909155505033600090815260116020526040812080548392906115e7908490613ebb565b90915550504360165560005b818110156116165761160433612dd5565b8061160e81613f84565b9150506115f3565b5060405181815233907f925f730a5ad66a8169d9e681b6feed65b2a165b2d93d33fce9d83b699f247914906020015b60405180910390a2506001600b55565b610c9183838360405180602001604052806000815250612146565b6000546001600160a01b0316331461169a5760405162461bcd60e51b8152600401610b5b90613dda565b601a546001600160a01b03828116911614806116c35750601b546001600160a01b038281169116145b6117035760405162461bcd60e51b81526020600482015260116024820152703ab739bab83837b93a32b2103a37b5b2b760791b6044820152606401610b5b565b601a546001600160a01b038281169116141561171f5750601855565b601b546001600160a01b038281169116141561173b5760198290555b5050565b600061174a60095490565b82106117ad5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610b5b565b600982815481106117c0576117c0613ff5565b90600052602060002001549050919050565b6000546001600160a01b031633146117fc5760405162461bcd60e51b8152600401610b5b90613dda565b60155460ff16156118415760405162461bcd60e51b815260206004820152600f60248201526e13595d1859185d18481b1bd8dad959608a1b6044820152606401610b5b565b61184d60138383613682565b507f23c8c9488efebfd474e85a7956de6f39b17c7ab88502d42a623db2d8e382bbaa828260405161187f929190613c6b565b60405180910390a15050565b6000818152600360205260408120546001600160a01b031680610a4e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610b5b565b60006001600160a01b03821661196d5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610b5b565b506001600160a01b031660009081526004602052604090205490565b6000546001600160a01b031633146119b35760405162461bcd60e51b8152600401610b5b90613dda565b6119bd6000612e71565b565b6000546001600160a01b031633146119e95760405162461bcd60e51b8152600401610b5b90613dda565b601c80546001600160a01b0319166001600160a01b0383169081179091556040519081527ffcb8a963756b148f85a52537b63147b6c4b40af694099c901ac3b99d317a2db89060200160405180910390a150565b6002600b541415611a605760405162461bcd60e51b8152600401610b5b90613e84565b6002600b556000546001600160a01b03163314611a8f5760405162461bcd60e51b8152600401610b5b90613dda565b600e544211611ab05760405162461bcd60e51b8152600401610b5b90613e0f565b6000546001600160a01b03163314611af257611ad46706f05b59d3b2000082613ee7565b3414611af25760405162461bcd60e51b8152600401610b5b90613cad565b3360009081526012602052604081208054839290611b11908490613ebb565b90915550504360165560005b81811015611b4057611b2e33612ec1565b80611b3881613f84565b915050611b1d565b5060405181815233907f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe90602001611645565b6000546001600160a01b03163314611b9d5760405162461bcd60e51b8152600401610b5b90613dda565b600e54421015611be45760405162461bcd60e51b8152602060048201526012602482015271135a5b9d081a185cc81b9bdd08195b99195960721b6044820152606401610b5b565b6040514790600090339083908381818185875af1925050503d8060008114611c28576040519150601f19603f3d011682016040523d82523d6000602084013e611c2d565b606091505b5050905080611c7e5760405162461bcd60e51b815260206004820152601760248201527f436f756c64206e6f742073656e642070726f63656564730000000000000000006044820152606401610b5b565b60405182815233907fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a9060200160405180910390a25050565b606060028054610a6390613f49565b6000546001600160a01b03163314611cf05760405162461bcd60e51b8152600401610b5b90613dda565b6015805460ff191660011790556040517f0f2e5b6c72c6a4491efd919a9f9a409f324ef0708c11ee57d410c2cb06c0992b90600090a1565b6002600b541415611d4b5760405162461bcd60e51b8152600401610b5b90613e84565b6002600b55600d54421015611d955760405162461bcd60e51b815260206004820152601060248201526f135a5b9d081b9bdd081cdd185c9d195960821b6044820152606401610b5b565b601554610100900460ff16611e1957600e544210611dc55760405162461bcd60e51b8152600401610b5b90613e0f565b33600090815260106020526040902054811115611df45760405162461bcd60e51b8152600401610b5b90613d61565b3360009081526010602052604081208054839290611e13908490613f06565b90915550505b6000546001600160a01b03163314611e5b57611e3d6706f05b59d3b2000082613ee7565b3414611e5b5760405162461bcd60e51b8152600401610b5b90613cad565b3360009081526012602052604081208054839290611e7a908490613ebb565b90915550504360165560005b81811015611b4057611e9733612dd5565b80611ea181613f84565b915050611e86565b61173b338383612f37565b6000546001600160a01b03163314611ede5760405162461bcd60e51b8152600401610b5b90613dda565b6015805461ff001981166101009182900460ff16159091021790556040517f98bc8e6193430ff4877b42d69dfbee87f60c67a35b201e9e9402fa4fc4befae690600090a1565b6000546001600160a01b03163314611f4e5760405162461bcd60e51b8152600401610b5b90613dda565b600e54421015611f955760405162461bcd60e51b8152602060048201526012602482015271135a5b9d081a185cc81b9bdd08195b99195960721b6044820152606401610b5b565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015611fd757600080fd5b505afa158015611feb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200f9190613a9f565b116120525760405162461bcd60e51b81526020600482015260136024820152724e6f2066756e6420746f20776974686472617760681b6044820152606401610b5b565b6040516370a0823160e01b815230600482018190526001600160a01b038316916323b872dd9190339084906370a082319060240160206040518083038186803b15801561209e57600080fd5b505afa1580156120b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d69190613a9f565b6040518463ffffffff1660e01b81526004016120f493929190613c0a565b602060405180830381600087803b15801561210e57600080fd5b505af1158015612122573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173b91906139bd565b6121503383612b37565b61216c5760405162461bcd60e51b8152600401610b5b90613e33565b61217884848484613006565b50505050565b6000818152600360205260409020546060906001600160a01b03166121fd5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610b5b565b601361220883613039565b604051602001612219929190613b4f565b6040516020818303038152906040529050919050565b60007f000000000000000000000000000000000000000000000000000000000000000060165461225f9190613f9f565b905090565b6000546001600160a01b0316331461228e5760405162461bcd60e51b8152600401610b5b90613dda565b600c839055600d829055600e81905560408051848152602081018490529081018290527f3e5026851758e1ab6e995b071b048e26e92f459b047600ff68914479d5074c549060600160405180910390a1505050565b6002600b5414156123065760405162461bcd60e51b8152600401610b5b90613e84565b6002600b55600d544210156123505760405162461bcd60e51b815260206004820152601060248201526f135a5b9d081b9bdd081cdd185c9d195960821b6044820152606401610b5b565b601a546001600160a01b03828116911614806123795750601b546001600160a01b038281169116145b6123b55760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b2102a37b5b2b760991b6044820152606401610b5b565b601554610100900460ff1661243957600e5442106123e55760405162461bcd60e51b8152600401610b5b90613e0f565b336000908152601060205260409020548211156124145760405162461bcd60e51b8152600401610b5b90613d61565b3360009081526010602052604081208054849290612433908490613f06565b90915550505b601a546001600160a01b03828116911614156125af576000546001600160a01b031633146125aa578160185461246f9190613ee7565b6040516370a0823160e01b81523360048201526001600160a01b038316906370a082319060240160206040518083038186803b1580156124ae57600080fd5b505afa1580156124c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e69190613a9f565b10156125045760405162461bcd60e51b8152600401610b5b90613d2a565b806001600160a01b03166323b872dd33601c60009054906101000a90046001600160a01b0316856018546125389190613ee7565b6040518463ffffffff1660e01b815260040161255693929190613c0a565b602060405180830381600087803b15801561257057600080fd5b505af1158015612584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a891906139bd565b505b612720565b601b546001600160a01b0382811691161415612720576000546001600160a01b0316331461272057816019546125e59190613ee7565b6040516370a0823160e01b81523360048201526001600160a01b038316906370a082319060240160206040518083038186803b15801561262457600080fd5b505afa158015612638573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061265c9190613a9f565b101561267a5760405162461bcd60e51b8152600401610b5b90613d2a565b806001600160a01b03166323b872dd33601c60009054906101000a90046001600160a01b0316856019546126ae9190613ee7565b6040518463ffffffff1660e01b81526004016126cc93929190613c0a565b602060405180830381600087803b1580156126e657600080fd5b505af11580156126fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271e91906139bd565b505b336000908152601260205260408120805484929061273f908490613ebb565b90915550504360165560005b8281101561276e5761275c33612dd5565b8061276681613f84565b91505061274b565b5060405182815233907f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe9060200161146f565b60138054610ca390613f49565b6000546001600160a01b031633146127d85760405162461bcd60e51b8152600401610b5b90613dda565b8281146127f75760405162461bcd60e51b8152600401610b5b90613d98565b60005b83811015610ed257600085858381811061281657612816613ff5565b905060200201602081019061282b9190613783565b6001600160a01b0316141561286b5760405162461bcd60e51b8152600401610b5b906020808252600490820152635a65726f60e01b604082015260600190565b82828281811061287d5761287d613ff5565b905060200201356010600087878581811061289a5761289a613ff5565b90506020020160208101906128af9190613783565b6001600160a01b031681526020810191909152604001600020558484828181106128db576128db613ff5565b90506020020160208101906128f09190613783565b6001600160a01b03167f6ea640312e182de387819fbeb13be00db3171a445412852248559054871c419984848481811061292c5761292c613ff5565b9050602002013560405161294291815260200190565b60405180910390a28061295481613f84565b9150506127fa565b6000546001600160a01b031633146129865760405162461bcd60e51b8152600401610b5b90613dda565b6001600160a01b0381166129eb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b5b565b6129f481612e71565b50565b6000546001600160a01b03163314612a215760405162461bcd60e51b8152600401610b5b90613dda565b60155460ff1615612a665760405162461bcd60e51b815260206004820152600f60248201526e13595d1859185d18481b1bd8dad959608a1b6044820152606401610b5b565b612a7260148383613682565b507f9a15466c5caef68c45172698c3e94fec7de42c88676fa00817bde701c8df8903828260405161187f929190613c6b565b60006001600160e01b0319821663780e9d6360e01b1480610a4e5750610a4e82613137565b600081815260056020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612afe8261188b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600360205260408120546001600160a01b0316612bb05760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610b5b565b6000612bbb8361188b565b9050806001600160a01b0316846001600160a01b03161480612bf65750836001600160a01b0316612beb84610ae6565b6001600160a01b0316145b80612c2657506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316612c418261188b565b6001600160a01b031614612ca55760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610b5b565b6001600160a01b038216612d075760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610b5b565b612d12838383613187565b612d1d600082612ac9565b6001600160a01b0383166000908152600460205260408120805460019290612d46908490613f06565b90915550506001600160a01b0382166000908152600460205260408120805460019290612d74908490613ebb565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b7f000000000000000000000000000000000000000000000000000000000000000060175410612e415760405162461bcd60e51b8152602060048201526018602482015277105d985a5b18589b19481cdd5c1c1b1e481c995858da195960421b6044820152606401610b5b565b612e59336017546001612e549190613ebb565b613192565b60178054906000612e6983613f84565b919050555050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b612eec7f0000000000000000000000000000000000000000000000000000000000000000603c613ebb565b60175410612e415760405162461bcd60e51b8152602060048201526018602482015277105d985a5b18589b19481cdd5c1c1b1e481c995858da195960421b6044820152606401610b5b565b816001600160a01b0316836001600160a01b03161415612f995760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610b5b565b6001600160a01b03838116600081815260066020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b613011848484612c2e565b61301d848484846131ac565b6121785760405162461bcd60e51b8152600401610b5b90613cd8565b60608161305d5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115613087578061307181613f84565b91506130809050600a83613ed3565b9150613061565b60008167ffffffffffffffff8111156130a2576130a261400b565b6040519080825280601f01601f1916602001820160405280156130cc576020820181803683370190505b5090505b8415612c26576130e1600183613f06565b91506130ee600a86613f9f565b6130f9906030613ebb565b60f81b81838151811061310e5761310e613ff5565b60200101906001600160f81b031916908160001a905350613130600a86613ed3565b94506130d0565b60006001600160e01b031982166380ac58cd60e01b148061316857506001600160e01b03198216635b5e139f60e01b145b80610a4e57506301ffc9a760e01b6001600160e01b0319831614610a4e565b610c918383836132b9565b61173b828260405180602001604052806000815250613371565b60006001600160a01b0384163b156132ae57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906131f0903390899088908890600401613c2e565b602060405180830381600087803b15801561320a57600080fd5b505af192505050801561323a575060408051601f3d908101601f19168201909252613237918101906139f7565b60015b613294573d808015613268576040519150601f19603f3d011682016040523d82523d6000602084013e61326d565b606091505b50805161328c5760405162461bcd60e51b8152600401610b5b90613cd8565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612c26565b506001949350505050565b6001600160a01b0383166133145761330f81600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0155565b613337565b816001600160a01b0316836001600160a01b0316146133375761333783826133a4565b6001600160a01b03821661334e57610c9181613441565b826001600160a01b0316826001600160a01b031614610c9157610c9182826134f0565b61337b8383613534565b61338860008484846131ac565b610c915760405162461bcd60e51b8152600401610b5b90613cd8565b600060016133b184611902565b6133bb9190613f06565b60008381526008602052604090205490915080821461340e576001600160a01b03841660009081526007602090815260408083208584528252808320548484528184208190558352600890915290208190555b5060009182526008602090815260408084208490556001600160a01b039094168352600781528383209183525290812055565b60095460009061345390600190613f06565b6000838152600a60205260408120546009805493945090928490811061347b5761347b613ff5565b90600052602060002001549050806009838154811061349c5761349c613ff5565b6000918252602080832090910192909255828152600a909152604080822084905585825281205560098054806134d4576134d4613fdf565b6001900381819060005260206000200160009055905550505050565b60006134fb83611902565b6001600160a01b039093166000908152600760209081526040808320868452825280832085905593825260089052919091209190915550565b6001600160a01b03821661358a5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610b5b565b6000818152600360205260409020546001600160a01b0316156135ef5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610b5b565b6135fb60008383613187565b6001600160a01b0382166000908152600460205260408120805460019290613624908490613ebb565b909155505060008181526003602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b82805461368e90613f49565b90600052602060002090601f0160209004810192826136b057600085556136f6565b82601f106136c95782800160ff198235161785556136f6565b828001600101855582156136f6579182015b828111156136f65782358255916020019190600101906136db565b50613702929150613706565b5090565b5b808211156137025760008155600101613707565b80356001600160a01b038116811461373257600080fd5b919050565b60008083601f84011261374957600080fd5b50813567ffffffffffffffff81111561376157600080fd5b6020830191508360208260051b850101111561377c57600080fd5b9250929050565b60006020828403121561379557600080fd5b61379e8261371b565b9392505050565b600080604083850312156137b857600080fd5b6137c18361371b565b91506137cf6020840161371b565b90509250929050565b6000806000606084860312156137ed57600080fd5b6137f68461371b565b92506138046020850161371b565b9150604084013590509250925092565b6000806000806080858703121561382a57600080fd5b6138338561371b565b93506138416020860161371b565b925060408501359150606085013567ffffffffffffffff8082111561386557600080fd5b818701915087601f83011261387957600080fd5b81358181111561388b5761388b61400b565b604051601f8201601f19908116603f011681019083821181831017156138b3576138b361400b565b816040528281528a60208487010111156138cc57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561390357600080fd5b61390c8361371b565b9150602083013561391c81614021565b809150509250929050565b6000806040838503121561393a57600080fd5b6139438361371b565b946020939093013593505050565b6000806000806040858703121561396757600080fd5b843567ffffffffffffffff8082111561397f57600080fd5b61398b88838901613737565b909650945060208701359150808211156139a457600080fd5b506139b187828801613737565b95989497509550505050565b6000602082840312156139cf57600080fd5b815161379e81614021565b6000602082840312156139ec57600080fd5b813561379e8161402f565b600060208284031215613a0957600080fd5b815161379e8161402f565b60008060208385031215613a2757600080fd5b823567ffffffffffffffff80821115613a3f57600080fd5b818501915085601f830112613a5357600080fd5b813581811115613a6257600080fd5b866020828501011115613a7457600080fd5b60209290920196919550909350505050565b600060208284031215613a9857600080fd5b5035919050565b600060208284031215613ab157600080fd5b5051919050565b60008060408385031215613acb57600080fd5b823591506137cf6020840161371b565b600080600060608486031215613af057600080fd5b505081359360208301359350604090920135919050565b60008151808452613b1f816020860160208601613f1d565b601f01601f19169290920160200192915050565b60008151613b45818560208601613f1d565b9290920192915050565b600080845481600182811c915080831680613b6b57607f831692505b6020808410821415613b8b57634e487b7160e01b86526022600452602486fd5b818015613b9f5760018114613bb057613bdd565b60ff19861689528489019650613bdd565b60008b81526020902060005b86811015613bd55781548b820152908501908301613bbc565b505084890196505b505050505050613c01613bf08286613b33565b64173539b7b760d91b815260050190565b95945050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613c6190830184613b07565b9695505050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60208152600061379e6020830184613b07565b602080825260119082015270125b98dbdc9c9958dd081c185e5b595b9d607a1b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526017908201527f746f6b656e20616d6f756e7420697320746f6f206c6f77000000000000000000604082015260600190565b6020808252601d908201527f4d6178206d696e747320666f7220616464726573732072656163686564000000604082015260600190565b60208082526022908201527f416464726573736573206c656e67746820213d20656e7472696573206c656e676040820152610e8d60f31b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600a9082015269135a5b9d08195b99195960b21b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115613ece57613ece613fb3565b500190565b600082613ee257613ee2613fc9565b500490565b6000816000190483118215151615613f0157613f01613fb3565b500290565b600082821015613f1857613f18613fb3565b500390565b60005b83811015613f38578181015183820152602001613f20565b838111156121785750506000910152565b600181811c90821680613f5d57607f821691505b60208210811415613f7e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415613f9857613f98613fb3565b5060010190565b600082613fae57613fae613fc9565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146129f457600080fd5b6001600160e01b0319811681146129f457600080fdfea2646970667358221220e75fb5e4cd14f7f56d974471d9a1ced629bb59078d68a59cfe22c777113cd2bf64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 905,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 907,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 911,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 915,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 919,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 925,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1894,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1898,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1901,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "_allTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1905,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 115,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "_status",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2857,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "MINT_PRE_START_TIME",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2859,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "MINT_START_TIME",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2861,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "MINT_END_TIME",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2865,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "whitelistPre",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2869,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "whitelist",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2873,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "entriesPerAddressPre",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2877,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "entriesPerAddress",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2879,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "uri",
        "offset": 0,
        "slot": "19",
        "type": "t_string_storage"
      },
      {
        "astId": 2881,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "provenance",
        "offset": 0,
        "slot": "20",
        "type": "t_string_storage"
      },
      {
        "astId": 2883,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "locked",
        "offset": 0,
        "slot": "21",
        "type": "t_bool"
      },
      {
        "astId": 2885,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "mintOpen",
        "offset": 1,
        "slot": "21",
        "type": "t_bool"
      },
      {
        "astId": 2887,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "entropy",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 2889,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "nftCount",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 2892,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "afinPrice",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 2895,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "mvpPrice",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 2897,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "afin",
        "offset": 0,
        "slot": "26",
        "type": "t_address"
      },
      {
        "astId": 2899,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "mvp",
        "offset": 0,
        "slot": "27",
        "type": "t_address"
      },
      {
        "astId": 2901,
        "contract": "contracts/MetaHornbill.sol:MetaHornbill",
        "label": "feeAddress",
        "offset": 0,
        "slot": "28",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}